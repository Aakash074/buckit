import {
    Client,
    PrivateKey,
    ContractCreateTransaction,
    FileCreateTransaction,
    FileAppendTransaction,
} from "@hashgraph/sdk";

const HEDERA_ACCOUNT_ID = "0.0.4866116";
const HEDERA_PRIVATE_KEY = PrivateKey.fromString("302e020100300506032b657004220420600c8fc074e720e52495c2ab0ac77d38129850d9889e86d2d220d75d59e56a74");

// Full bytecode of your contract
const contractBytecode = ""; 

async function main() {
    const client = Client.forTestnet();
    client.setOperator(HEDERA_ACCOUNT_ID, HEDERA_PRIVATE_KEY);

    // Create a file on Hedera and store the first chunk of bytecode
    const initialChunk = contractBytecode.slice(0, 4096); // first 4 KB
    const fileCreateTx = new FileCreateTransaction()
        .setContents(initialChunk)
        .setKeys([HEDERA_PRIVATE_KEY.publicKey]);
    const fileCreateSubmit = await fileCreateTx.execute(client);
    const fileCreateRx = await fileCreateSubmit.getReceipt(client);
    const bytecodeFileId = fileCreateRx.fileId;
    console.log(`- The bytecode file ID is: ${bytecodeFileId} \n`);

    // Append remaining chunks if the bytecode exceeds 4 KB
    for (let i = 4096; i < contractBytecode.length; i += 4096) {
        const chunk = contractBytecode.slice(i, i + 4096);
        const fileAppendTx = new FileAppendTransaction()
            .setFileId(bytecodeFileId)
            .setContents(chunk)
            .setMaxChunks(10); // Allows the append to handle multiple chunks
        await fileAppendTx.execute(client);
    }

    // Instantiate the contract
    const contractInstantiateTx = new ContractCreateTransaction()
        .setBytecodeFileId(bytecodeFileId)
        .setGas(300000);
    const contractInstantiateSubmit = await contractInstantiateTx.execute(client);
    const contractInstantiateRx = await contractInstantiateSubmit.getReceipt(client);
    const contractId = contractInstantiateRx.contractId;
    const contractAddress = contractId.toSolidityAddress();
    console.log(`- The contract ID is: ${contractId} \n`);
    console.log(`- The contract address (for use in Solidity) is: ${contractAddress} \n`);

    client.close();
}

main().catch((error) => {
    console.error(error);
    process.exitCode = 1;
});
